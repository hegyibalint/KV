package hu.bme.mit.kv.queries

import "http://hu.bme.mit.kv.railroadmodel"

pattern turnout(turnout : Turnout){
	Turnout(turnout);
}

pattern sectionNeighbor(s1 : Section, s2 : Section){
	neg find turnout(s1);
	neg find turnout(s2);
	Section.clockwise(s1,s2);
} or {
	neg find turnout(s1);
	neg find turnout(s2);
	Section.counterClockwise(s1,s2);
}

pattern inSameRailroadPart(section : Section, someSection : Section){
	find sectionNeighbor+(section, someSection);
//	section != someSection;
} or {
	find kulonPattern(section);
	find kulonPattern(someSection);
	section == someSection;
}

pattern kulonPattern(section: Section){ //XXX rename
	Section.clockwise(section, turnout1);
	Section.counterClockwise(section, turnout2);
	Turnout(turnout1);
	Turnout(turnout2);
} or {
	BlindTrack(section);
}



pattern trainsNextTurnout(train : Train, turnout : Turnout){
	Train.goingClockwise(train,true);
	Train.currentlyOn(train, trainSection);
	Section.clockwise(sectionNextToTurnout, turnout);
	find inSameRailroadPart(trainSection, sectionNextToTurnout);
} or {
	Train.goingClockwise(train,false);
	Train.currentlyOn(train, trainSection);
	Section.counterClockwise(sectionNextToTurnout, turnout);
	find inSameRailroadPart(trainSection, sectionNextToTurnout);
} or {
	Train.currentlyOn(train, turnout);
} 
//or {
//	Train.goingClockwise(train, true);
//	Train.currentlyOn.clockwise(train, turnout);
//} or {
//	Train.goingClockwise(train, false);
//	Train.currentlyOn.counterClockwise(train, turnout);
//}

pattern sectionsInSameRailroadPartAsTrain(train : Train, section : Section){
	Train.currentlyOn(train, trainSection);
	find inSameRailroadPart(trainSection, section);
}

pattern trainGoingToCutTheTurnout(train : Train, turnout : Turnout){
	find trainsNextTurnout(train, turnout);
	Train.goingClockwise(train,true);
	Section.clockwise(sectionNearTheTurnout, turnout);
	Turnout.notConnectedSection(turnout, sectionNearTheTurnout);
	Train.currentlyOn(train, trainSection);
	find inSameRailroadPart(trainSection, sectionNearTheTurnout);
} or {
	find trainsNextTurnout(train, turnout);
	Train.goingClockwise(train,false);
	Section.counterClockwise(sectionNearTheTurnout, turnout);
	Turnout.notConnectedSection(turnout, sectionNearTheTurnout);
	Train.currentlyOn(train, trainSection);
	find inSameRailroadPart(trainSection, sectionNearTheTurnout);
} or {
	EnglishTurnout(turnout);
	find trainsNextTurnout(train, turnout);
	Train.goingClockwise(train,false);
	Section.counterClockwise(sectionNearTheTurnout, turnout);
	EnglishTurnout.notConnectedClockwiseSection(turnout, sectionNearTheTurnout); // XXX there has to be a more elegant way
	Train.currentlyOn(train, trainSection);
	find inSameRailroadPart(trainSection, sectionNearTheTurnout);
}

pattern twoTrainsInSameSection(t1 : Train, t2 : Train){
	t1 != t2;
	Train.currentlyOn(t1, section);
	Train.currentlyOn(t2, section);
}

pattern trainIsGoingToHitNextAfterNext(t1: Train, t2 : Train){
	t1 != t2;
	Train.goingClockwise(t1, true);
//	Train.currentlyOn.clockwise.clockwise(t1,nextSection);
	Train.currentlyOn(t1, trainSection);
	Section.clockwise(trainSection, nearTrainSection);
	Section.clockwise(nearTrainSection, notSoNearTheFuckinTrainSection);
	Train.currentlyOn(t2, notSoNearTheFuckinTrainSection);
} or {
	t1 != t2;
	Train.goingClockwise(t1, false);
//	Train.currentlyOn.counterClockwise.counterClockwise(t1,nextSection);
	Train.currentlyOn(t1, trainSection);
	Section.counterClockwise(trainSection, nearTrainSection);
	Section.counterClockwise(nearTrainSection, notSoNearTheFuckinTrainSection);
	Train.currentlyOn(t2, notSoNearTheFuckinTrainSection);
}

pattern trainIsGoingToHitNext(t1: Train, t2 : Train){
	Train.goingClockwise(t1, true);
	Train.currentlyOn.clockwise(t1,nextSection);
	Train.currentlyOn(t2, nextSection);
} or {
	Train.goingClockwise(t1, false);
	Train.currentlyOn.counterClockwise(t1,nextSection);
	Train.currentlyOn(t2, nextSection);
}

pattern trainIsGoingToHit(t1 : Train, t2 : Train){
	find trainIsGoingToHitNextAfterNext(t1,t2);
} or {
	find trainIsGoingToHitNext(t1,t2);
} or {
	find twoTrainsInSameSection(t1,t2);
}


//pattern twoTrainsWithZeroSectionsBetweenThem(t1 : Train, t2 : Train){
//	t1 != t2; //Feel free to remove this when the turner has been implemented
//	Train.currentlyOn(t1, section);
//	find sectionBeforeTrain(t2, section);
//}
//
//pattern twoTrainsWithOneSectionsBetweenThem(t1 : Train, t2 : Train){
//	t1 != t2;//Feel free to remove this when the turner has been implemented
//	find sectionBeforeTrain(t1, section);
//	find sectionBeforeTrain(t2, section);
//}
//
//pattern safe(t1: Train, t2: Train){
//	t1 != t2;
//	0 == count find twoTrainsInSameSection(t1, t2);
//	0 == count find twoTrainsWithZeroSectionsBetweenThem(t1,t2);
//	0 == count find twoTrainsWithOneSectionsBetweenThem(t1,t2);
//
//}
