package hu.bme.mit.kv.queries

import "http://hu.bme.mit.kv.railroadmodel"

pattern turnout(turnout : Turnout){
	Turnout(turnout);
}

pattern sectionNeighbor(s1 : Section, s2 : Section){
	neg find turnout(s1);
	neg find turnout(s2);
	Section.clockwise(s1,s2);
} or {
	neg find turnout(s1);
	neg find turnout(s2);
	Section.counterClockwise(s1,s2);
}

pattern inSameRailroadPart(section : Section, someSection : Section){
	find sectionNeighbor+(section, someSection);
//	section != someSection;
}

pattern trainsInSameRailroadPart(train1 : Train, train2 : Train){
	Train.currentlyOn(train1, section1);
	Train.currentlyOn(train2, section2);
	find inSameRailroadPart(section1,section2);
}

//pattern nextSectionWithTrain(t : Train, section1 : Section, section2 : Section){
//	Train.goingClockwise(t, true);
//	Section.clockwise(section1, section2);
//} or {
//	Train.goingClockwise(t, false);
//	Section.counterClockwise(section1, section2);
//}

pattern trainsNextTurnout(train : Train, turnout : Turnout){
	Train.goingClockwise(train,true);
	Train.currentlyOn(train, trainSection);
	Section.clockwise(sectionNextToTurnout, turnout);
	find inSameRailroadPart(trainSection, sectionNextToTurnout);
} or {
	Train.goingClockwise(train,false);
	Train.currentlyOn(train, trainSection);
	Section.counterClockwise(sectionNextToTurnout, turnout);
	find inSameRailroadPart(trainSection, sectionNextToTurnout);
} or {
	Train.currentlyOn(train, turnout);
} 
//or {
//	Train.goingClockwise(train, true);
//	Train.currentlyOn.clockwise(train, turnout);
//} or {
//	Train.goingClockwise(train, false);
//	Train.currentlyOn.counterClockwise(train, turnout);
//}

pattern sectionsInSameRailroadPartAsTrain(train : Train, section : Section){
	Train.currentlyOn(train, trainSection);
	find inSameRailroadPart(trainSection, section);
}

pattern turnoutWithTwoTrainsComingTowards(turnout : Turnout, train1 : Train, train2 : Train ){
	train1 != train2;
	find trainsNextTurnout(train1, turnout);
	find trainsNextTurnout(train2, turnout);
	
}

pattern trainGoingToCutTheTurnout(train : Train, turnout : Turnout){
	find trainsNextTurnout(train, turnout);
	Train.goingClockwise(train,true);
	Section.clockwise(sectionNearTheTurnout, turnout);
	Turnout.notConnectedSection(turnout, sectionNearTheTurnout);
	Train.currentlyOn(train, trainSection);
	find inSameRailroadPart(trainSection, sectionNearTheTurnout);
} or {
	find trainsNextTurnout(train, turnout);
	Train.goingClockwise(train,false);
	Section.counterClockwise(sectionNearTheTurnout, turnout);
	Turnout.notConnectedSection(turnout, sectionNearTheTurnout);
	Train.currentlyOn(train, trainSection);
	find inSameRailroadPart(trainSection, sectionNearTheTurnout);
}

pattern inTheForwardPath(t : Train, s : Section){
	find sectionBeforeTrain(t,s); 
}

//Patterns to find which section is the next one for each train

pattern sectionBeforeClockwiseTrain(t: Train, s: Section) {
	Train.goingClockwise(t, true);
	Train.currentlyOn(t, currentSection);
	Section.clockwise(currentSection, s);
}

pattern sectionBeforeCounterClockwiseTrain(t : Train, s : Section) { //TODO tina turner
	Train.goingClockwise(t, false);
	Train.currentlyOn(t, currentSection);
	Section.counterClockwise(currentSection, s);
}

pattern sectionBeforeTrain(t : Train, s : Section){
	find sectionBeforeCounterClockwiseTrain(t, s);
} or {
	find sectionBeforeClockwiseTrain(t,s);
}

pattern twoTrainsInSameSection(t1 : Train, t2 : Train){
	t1 != t2;
	Train.currentlyOn(t1, section);
	Train.currentlyOn(t2, section);
}

pattern trainIsGoingToHit(t1: Train, t2 : Train){
	Train.goingClockwise(t1, true);
	Train.currentlyOn.clockwise(t1,nextSection);
	Train.currentlyOn(t2, nextSection);
} or {
	Train.goingClockwise(t1, false);
	Train.currentlyOn.counterClockwise(t1,nextSection);
	Train.currentlyOn(t2, nextSection);
	
}

//pattern twoTrainsWithZeroSectionsBetweenThem(t1 : Train, t2 : Train){
//	t1 != t2; //Feel free to remove this when the turner has been implemented
//	Train.currentlyOn(t1, section);
//	find sectionBeforeTrain(t2, section);
//}
//
//pattern twoTrainsWithOneSectionsBetweenThem(t1 : Train, t2 : Train){
//	t1 != t2;//Feel free to remove this when the turner has been implemented
//	find sectionBeforeTrain(t1, section);
//	find sectionBeforeTrain(t2, section);
//}
//
//pattern safe(t1: Train, t2: Train){
//	t1 != t2;
//	0 == count find twoTrainsInSameSection(t1, t2);
//	0 == count find twoTrainsWithZeroSectionsBetweenThem(t1,t2);
//	0 == count find twoTrainsWithOneSectionsBetweenThem(t1,t2);
//
//}
